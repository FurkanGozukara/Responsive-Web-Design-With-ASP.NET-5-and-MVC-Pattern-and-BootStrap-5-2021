#pragma checksum "C:\Users\Furkan Gözükara\Desktop\mvc asp.net bootstrap\lectures\lecture 16\Views\Lecture15\Lec15Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "eb44043c0b1718c6cf751e30062cd1ecc3296899"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Lecture15_Lec15Index), @"mvc.1.0.view", @"/Views/Lecture15/Lec15Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 9 "C:\Users\Furkan Gözükara\Desktop\mvc asp.net bootstrap\lectures\lecture 16\Views\_ViewImports.cshtml"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Furkan Gözükara\Desktop\mvc asp.net bootstrap\lectures\lecture 16\Views\_ViewImports.cshtml"
using Microsoft.Extensions.Options;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Furkan Gözükara\Desktop\mvc asp.net bootstrap\lectures\lecture 16\Views\_ViewImports.cshtml"
using static lecture_9.GlobalMethods;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"eb44043c0b1718c6cf751e30062cd1ecc3296899", @"/Views/Lecture15/Lec15Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"726bffed9337dbeef8f2b70d93e13c12af941aa8", @"/Views/_ViewImports.cshtml")]
    public class Views_Lecture15_Lec15Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("row g-3 needs-validation"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "1", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "2", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "3", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("was-validated"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/single-img-six.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("figure-img img-fluid rounded"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("alt", new global::Microsoft.AspNetCore.Html.HtmlString("..."), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("media", new global::Microsoft.AspNetCore.Html.HtmlString("(max-width: 650px)"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("srcset", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/single-img-six.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("image/svg+xml"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("bd-example"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"
<style>
    td {
        border-style: solid;
        border-width: 1px;
    }

    .borderClass div {
        border-style: solid;
        border-width: 1px;
    }

    .rowsize .row {
        height: 100px;
    }

    .tt1 tr {
        height: 100px;
    }
</style>

 

");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb44043c0b1718c6cf751e30062cd1ecc32968998549", async() => {
                WriteLiteral(@"
    <div class=""col-md-4 position-relative"">
        <label for=""validationTooltip01"" class=""form-label"">First name</label>
        <input type=""text"" class=""form-control"" id=""validationTooltip01"" value=""Mark"" required>
        <div class=""valid-tooltip"">
            Looks good!
        </div>
    </div>
    <div class=""col-md-4 position-relative"">
        <label for=""validationTooltip02"" class=""form-label"">Last name</label>
        <input type=""text"" class=""form-control"" id=""validationTooltip02"" value=""Otto"" required>
        <div class=""valid-tooltip"">
            Looks good!
        </div>
    </div>
    <div class=""col-md-4 position-relative"">
        <label for=""validationTooltipUsername"" class=""form-label"">Username</label>
        <div class=""input-group has-validation"">
            <span class=""input-group-text"" id=""validationTooltipUsernamePrepend"">");
                WriteLiteral(@"@</span>
            <input type=""text"" class=""form-control"" id=""validationTooltipUsername"" aria-describedby=""validationTooltipUsernamePrepend"" required>
            <div class=""invalid-tooltip"">
                Please choose a unique and valid username.
            </div>
        </div>
    </div>
    <div class=""col-md-6 position-relative"">
        <label for=""validationTooltip03"" class=""form-label"">City</label>
        <input type=""text"" class=""form-control"" id=""validationTooltip03"" required>
        <div class=""invalid-tooltip"">
            Please provide a valid city.
        </div>
    </div>
    <div class=""col-md-3 position-relative"">
        <label for=""validationTooltip04"" class=""form-label"">State</label>
        <select class=""form-select"" id=""validationTooltip04"" required>
            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb44043c0b1718c6cf751e30062cd1ecc329689910631", async() => {
                    WriteLiteral("Choose...");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                BeginWriteTagHelperAttribute();
                __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
                __tagHelperExecutionContext.AddHtmlAttribute("selected", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
                BeginWriteTagHelperAttribute();
                __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
                __tagHelperExecutionContext.AddHtmlAttribute("disabled", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb44043c0b1718c6cf751e30062cd1ecc329689912516", async() => {
                    WriteLiteral("...");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
        </select>
        <div class=""invalid-tooltip"">
            Please select a valid state.
        </div>
    </div>
    <div class=""col-md-3 position-relative"">
        <label for=""validationTooltip05"" class=""form-label"">Zip</label>
        <input type=""text"" class=""form-control"" id=""validationTooltip05"" required>
        <div class=""invalid-tooltip"">
            Please provide a valid zip.
        </div>
    </div>
    <div class=""col-12"">
        <button class=""btn btn-primary"" type=""submit"">Submit form</button>
    </div>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("novalidate", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n<div class=\"borderClass\">\r\n\r\n\r\n    <div class=\"container col-12\">\r\n\r\n\r\n        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb44043c0b1718c6cf751e30062cd1ecc329689915570", async() => {
                WriteLiteral(@"
            <div class=""mb-3"">
                <label for=""validationTextarea"" class=""form-label"">Textarea</label>
                <textarea class=""form-control is-invalid"" id=""validationTextarea"" placeholder=""Required example textarea"" required></textarea>
                <div class=""invalid-feedback"">
                    Please enter a message in the textarea.
                </div>
            </div>

            <div class=""form-check mb-3"">
                <input type=""checkbox"" class=""form-check-input"" id=""validationFormCheck1"" required>
                <label class=""form-check-label"" for=""validationFormCheck1"">Check this checkbox</label>
                <div class=""invalid-feedback"">Example invalid feedback text</div>
            </div>

            <div class=""form-check"">
                <input type=""radio"" class=""form-check-input"" id=""validationFormCheck2"" name=""radio-stacked"" required>
                <label class=""form-check-label"" for=""validationFormCheck2"">Toggle this radio</la");
                WriteLiteral(@"bel>
            </div>
            <div class=""form-check mb-3"">
                <input type=""radio"" class=""form-check-input"" id=""validationFormCheck3"" name=""radio-stacked"" required>
                <label class=""form-check-label"" for=""validationFormCheck3"">Or toggle this other radio</label>
                <div class=""invalid-feedback"">More example invalid feedback text</div>
            </div>

            <div class=""mb-3"">
                <select class=""form-select"" required aria-label=""select example"">
                    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb44043c0b1718c6cf751e30062cd1ecc329689917494", async() => {
                    WriteLiteral("Open this select menu");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb44043c0b1718c6cf751e30062cd1ecc329689918753", async() => {
                    WriteLiteral("One");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb44043c0b1718c6cf751e30062cd1ecc329689919994", async() => {
                    WriteLiteral("Two");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb44043c0b1718c6cf751e30062cd1ecc329689921235", async() => {
                    WriteLiteral("Three");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                </select>
                <div class=""invalid-feedback"">Example invalid select feedback</div>
            </div>

            <div class=""mb-3"">
                <input type=""file"" class=""form-control"" aria-label=""file example"" required>
                <div class=""invalid-feedback"">Example invalid form file feedback</div>
            </div>

            <div class=""mb-3"">
                <button class=""btn btn-primary"" type=""submit"" disabled>Submit form</button>
            </div>
        ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

        <div class=""row g-5"">
            <div class=""col"">
                <input type=""text"" class=""form-control"" placeholder=""First name"" aria-label=""First name"">
            </div>
            <div class=""col"">
                <input type=""text"" class=""form-control"" placeholder=""Last name"" aria-label=""Last name"">
            </div>
        </div>

        <div class=""row g-3"">
            <div class=""col"">
                <input type=""text"" class=""form-control"" placeholder=""First name"" aria-label=""First name"">
            </div>
            <div class=""col"">
                <input type=""text"" class=""form-control"" placeholder=""Last name"" aria-label=""Last name"">
            </div>
        </div>

        <div class=""form-floating mb-3"">
            <input type=""email"" class=""form-control"" id=""floatingInput"" placeholder=""name@example.com"">
            <label for=""floatingInput"">Email address</label>
        </div>
        <div class=""form-floating"">
            <input type=""passwor");
            WriteLiteral(@"d"" class=""form-control"" id=""floatingPassword"" placeholder=""Password"">
            <label for=""floatingPassword"">Password</label>
        </div>
        <div class=""input-group mb-3"">
            <button type=""button"" class=""btn btn-outline-secondary"">Action</button>
            <button type=""button"" class=""btn btn-outline-secondary dropdown-toggle dropdown-toggle-split"" data-bs-toggle=""dropdown"" aria-expanded=""false"">
                <span class=""visually-hidden"">Toggle Dropdown</span>
            </button>
            <ul class=""dropdown-menu"">
                <li><a class=""dropdown-item"" href=""#"">Action</a></li>
                <li><a class=""dropdown-item"" href=""#"">Another action</a></li>
                <li><a class=""dropdown-item"" href=""#"">Something else here</a></li>
                <li><hr class=""dropdown-divider""></li>
                <li><a class=""dropdown-item"" href=""#"">Separated link</a></li>
            </ul>
            <input type=""text"" class=""form-control"" aria-label=""Text input ");
            WriteLiteral(@"with segmented dropdown button"">
        </div>

        <div class=""input-group"">
            <input type=""text"" class=""form-control"" aria-label=""Text input with segmented dropdown button"">
            <button type=""button"" class=""btn btn-outline-secondary"">Action</button>
            <button type=""button"" class=""btn btn-outline-secondary dropdown-toggle dropdown-toggle-split"" data-bs-toggle=""dropdown"" aria-expanded=""false"">
                <span class=""visually-hidden"">Toggle Dropdown</span>
            </button>
            <ul class=""dropdown-menu dropdown-menu-end"">
                <li><a class=""dropdown-item"" href=""#"">Action</a></li>
                <li><a class=""dropdown-item"" href=""#"">Another action</a></li>
                <li><a class=""dropdown-item"" href=""#"">Something else here</a></li>
                <li><hr class=""dropdown-divider""></li>
                <li><a class=""dropdown-item"" href=""#"">Separated link</a></li>
            </ul>
        </div>

        <div class=""mb-3"">
  ");
            WriteLiteral("          <span class=\"input-group-text\" id=\"basic-addon1\">");
            WriteLiteral(@"@</span>
            <input type=""text"" class=""form-control"" placeholder=""Username"" aria-label=""Username"" aria-describedby=""basic-addon1"">
        </div>

        <div class=""mb-3"">
            <input type=""text"" class=""form-control"" placeholder=""Recipient's username"" aria-label=""Recipient's username"" aria-describedby=""basic-addon2"">
            <span class=""input-group-text"" id=""basic-addon2"">");
            WriteLiteral(@"@example.com</span>
        </div>

        <label for=""basic-url"" class=""form-label"">Your vanity URL</label>
        <div class=""input-group mb-3"">
            <span class=""input-group-text"" id=""basic-addon3"">https://example.com/users/</span>
            <input type=""text"" class=""form-control"" id=""basic-url"" aria-describedby=""basic-addon3"">
        </div>

        <div class=""input-group mb-3"">
            <span class=""input-group-text"">$</span>
            <input type=""text"" class=""form-control"" aria-label=""Amount (to the nearest dollar)"">
            <span class=""input-group-text"">.00</span>
        </div>

        <div class=""input-group mb-3"">
            <input type=""text"" class=""form-control"" placeholder=""Username"" aria-label=""Username"">
            <span class=""input-group-text"">");
            WriteLiteral(@"@</span>
            <input type=""text"" class=""form-control"" placeholder=""Server"" aria-label=""Server"">
        </div>

        <div class=""input-group"">
            <span class=""input-group-text"">With textarea</span>
            <textarea class=""form-control"" aria-label=""With textarea""></textarea>
        </div>

        <div class=""input-group mb-3"">
            <span class=""input-group-text"" id=""basic-addon1"">");
            WriteLiteral(@"@</span>
            <input type=""text"" class=""form-control"" placeholder=""Username"" aria-label=""Username"" aria-describedby=""basic-addon1"">
        </div>

        <div class=""input-group mb-3"">
            <input type=""text"" class=""form-control"" placeholder=""Recipient's username"" aria-label=""Recipient's username"" aria-describedby=""basic-addon2"">
            <span class=""input-group-text"" id=""basic-addon2"">");
            WriteLiteral(@"@example.com</span>
        </div>

        <label for=""basic-url"" class=""form-label"">Your vanity URL</label>
        <div class=""input-group mb-3"">
            <span class=""input-group-text"" id=""basic-addon3"">https://example.com/users/</span>
            <input type=""text"" class=""form-control"" id=""basic-url"" aria-describedby=""basic-addon3"">
        </div>

        <div class=""input-group mb-3"">
            <span class=""input-group-text"">$</span>
            <input type=""text"" class=""form-control"" aria-label=""Amount (to the nearest dollar)"">
            <span class=""input-group-text"">.00</span>
        </div>

        <div class=""input-group mb-3"">
            <input type=""text"" class=""form-control"" placeholder=""Username"" aria-label=""Username"">
            <span class=""input-group-text"">");
            WriteLiteral(@"@</span>
            <input type=""text"" class=""form-control"" placeholder=""Server"" aria-label=""Server"">
        </div>

        <div class=""input-group"">
            <span class=""input-group-text"">With textarea</span>
            <textarea class=""form-control"" aria-label=""With textarea""></textarea>
        </div>

        <label for=""customRange1"" class=""form-label"">Example range</label>
        <input type=""range"" class=""form-range"" id=""customRange1"">

        <input type=""checkbox"" class=""btn-check"" id=""btn-check-outlined"" autocomplete=""off"">
        <label class=""btn btn-outline-primary"" for=""btn-check-outlined"">Single toggle</label><br>

        <input type=""checkbox"" class=""btn-check"" id=""btn-check-2-outlined"" checked autocomplete=""off"">
        <label class=""btn btn-outline-secondary"" for=""btn-check-2-outlined"">Checked</label><br>

        <input type=""radio"" class=""btn-check"" name=""options-outlined"" id=""success-outlined"" autocomplete=""off"" checked>
        <label class=""btn btn-outlin");
            WriteLiteral(@"e-success"" for=""success-outlined"">Checked success radio</label>

        <input type=""radio"" class=""btn-check"" name=""options-outlined"" id=""danger-outlined"" autocomplete=""off"">
        <label class=""btn btn-outline-danger"" for=""danger-outlined"">Danger radio</label>

        <div class=""form-check form-check-inline"">
            <input class=""form-check-input"" type=""checkbox"" id=""inlineCheckbox1"" value=""option1"">
            <label class=""form-check-label"" for=""inlineCheckbox1"">1</label>
        </div>
        <div class=""form-check form-check-inline"">
            <input class=""form-check-input"" type=""checkbox"" id=""inlineCheckbox2"" value=""option2"">
            <label class=""form-check-label"" for=""inlineCheckbox2"">2</label>
        </div>
        <div class=""form-check form-check-inline"">
            <input class=""form-check-input"" type=""checkbox"" id=""inlineCheckbox3"" value=""option3"" disabled>
            <label class=""form-check-label"" for=""inlineCheckbox3"">3 (disabled)</label>
        </div>
");
            WriteLiteral(@"
        <div class=""form-check form-switch"">
            <input class=""form-check-input"" type=""checkbox"" id=""flexSwitchCheckDefault"">
            <label class=""form-check-label"" for=""flexSwitchCheckDefault"">Default switch checkbox input</label>
        </div>
        <div class=""form-check form-switch"">
            <input class=""form-check-input"" type=""checkbox"" id=""flexSwitchCheckChecked"" checked>
            <label class=""form-check-label"" for=""flexSwitchCheckChecked"">Checked switch checkbox input</label>
        </div>
        <div class=""form-check form-switch"">
            <input class=""form-check-input"" type=""checkbox"" id=""flexSwitchCheckDisabled"" disabled>
            <label class=""form-check-label"" for=""flexSwitchCheckDisabled"">Disabled switch checkbox input</label>
        </div>
        <div class=""form-check form-switch"">
            <input class=""form-check-input"" type=""checkbox"" id=""flexSwitchCheckCheckedDisabled"" checked disabled>
            <label class=""form-check-label"" for=""f");
            WriteLiteral(@"lexSwitchCheckCheckedDisabled"">Disabled checked switch checkbox input</label>
        </div>

        <label for=""exampleColorInput"" class=""form-label"">Color picker</label>
        <input type=""color"" class=""form-control form-control-color"" id=""exampleColorInput"" value=""#563d7c"" title=""Choose your color"">

        <div class=""mb-3"">
            <label for=""formFile"" class=""form-label"">Default file input example</label>
            <input class=""form-control"" type=""file"" id=""formFile"">
        </div>
        <div class=""mb-3"">
            <label for=""formFileMultiple"" class=""form-label"">Multiple files input example</label>
            <input class=""form-control"" type=""file"" id=""formFileMultiple"" multiple>
        </div>
        <div class=""mb-3"">
            <label for=""formFileDisabled"" class=""form-label"">Disabled file input example</label>
            <input class=""form-control"" type=""file"" id=""formFileDisabled"" disabled>
        </div>
        <div class=""mb-3"">
            <label for=""fo");
            WriteLiteral(@"rmFileSm"" class=""form-label"">Small file input example</label>
            <input class=""form-control form-control-sm"" id=""formFileSm"" type=""file"">
        </div>
        <div>
            <label for=""formFileLg"" class=""form-label"">Large file input example</label>
            <input class=""form-control form-control-lg"" id=""formFileLg"" type=""file"">
        </div>

        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb44043c0b1718c6cf751e30062cd1ecc329689935502", async() => {
                WriteLiteral(@"
            <fieldset disabled>
                <legend>Disabled fieldset example</legend>
                <div class=""mb-3"">
                    <label for=""disabledTextInput"" class=""form-label"">Disabled input</label>
                    <input type=""text"" id=""disabledTextInput"" class=""form-control"" placeholder=""Disabled input"">
                </div>
                <div class=""mb-3"">
                    <label for=""disabledSelect"" class=""form-label"">Disabled select menu</label>
                    <select id=""disabledSelect"" class=""form-select"">
                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb44043c0b1718c6cf751e30062cd1ecc329689936372", async() => {
                    WriteLiteral("Disabled select");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                    </select>
                </div>
                <div class=""mb-3"">
                    <div class=""form-check"">
                        <input class=""form-check-input"" type=""checkbox"" id=""disabledFieldsetCheck"" disabled>
                        <label class=""form-check-label"" for=""disabledFieldsetCheck"">
                            Can't check this
                        </label>
                    </div>
                </div>
                <button type=""submit"" class=""btn btn-primary"">Submit</button>
            </fieldset>
        ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n    </div>\r\n    <br />    <br />\r\n    <div class=\"container col-3\">\r\n        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb44043c0b1718c6cf751e30062cd1ecc329689939048", async() => {
                WriteLiteral(@"
            <div class=""mb-3"">
                <label for=""exampleInputEmail1"" class=""form-label"">Email address</label>
                <input type=""email"" class=""form-control"" id=""exampleInputEmail1"" aria-describedby=""emailHelp"">
                <div id=""emailHelp"" class=""form-text"">We'll never share your email with anyone else.</div>
            </div>
            <div class=""mb-3"">
                <label for=""exampleInputPassword1"" class=""form-label"">Password</label>
                <input type=""password"" class=""form-control"" id=""exampleInputPassword1"">
            </div>
            <div class=""mb-3 form-check"">
                <input type=""checkbox"" class=""form-check-input"" id=""exampleCheck1"">
                <label class=""form-check-label"" for=""exampleCheck1"">Check me out</label>
            </div>
            <button type=""submit"" class=""btn btn-primary"">Submit</button>
        ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n    </div>\r\n    <br />    <br />\r\n    <figure class=\"figure\">\r\n        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "eb44043c0b1718c6cf751e30062cd1ecc329689941316", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
        <figcaption class=""figure-caption text-end"">A caption for the above image.</figcaption>
    </figure>

    <table class=""table table-striped"">
        <thead>
            ...
        </thead>
        <tbody>
            ...
            <tr>
                <td colspan=""4"">
                    <table class=""table mb-0"">
                        ...
                    </table>
                </td>
            </tr>
            ...
        </tbody>
    </table>

    <div class=""table-responsive-lg"">
        <table class=""table border-primary table-bordered table-hover table-dark table-striped tt1 align-middle "">
            <caption>List of users</caption>
            <thead class=""table-warning"">
                <tr>
                    <th scope=""col"">#</th>
                    <th scope=""col"">First</th>
                    <th scope=""col"">Last</th>
                    <th scope=""col"">Handle Handle</th>
                    <th scope=""col"">#</th>
                    <th ");
            WriteLiteral(@"scope=""col"">First</th>
                    <th scope=""col"">Last</th>
                    <th scope=""col"">Handle Handle</th>
                    <th scope=""col"">#</th>
                    <th scope=""col"">First</th>
                    <th scope=""col"">Last</th>
                    <th scope=""col"">Handle Handle</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class=""table-primary"">Mark</td>
                    <td class=""table-primary"">Mark</td>
                    <td class=""table-primary"">Mark</td>
                    <td class=""table-primary"">Mark</td>
                    <td class=""table-primary"">Mark</td>
                    <td class=""table-primary"">Mark</td>
                    <td class=""table-primary"">Mark</td>
                    <td class=""table-primary"">Mark</td>
                    <td class=""table-primary"">Mark</td>
                    <td class=""table-primary"">Mark</td>
                    <td class=""table-primary");
            WriteLiteral(@""">Mark</td>
                    <td class=""table-primary"">Mark</td>
                </tr>
                <tr>
                    <th scope=""row"">2</th>
                    <td>Jacob</td>
                    <td>Thornton</td>
                    <td>fat</td>
                </tr>
                <tr>
                    <th scope=""row"">3</th>
                    <td colspan=""2"">Larry the Bird Larry the Bird Larry the Bird Larry the Bird</td>
                    <td class=""table-active"">twitter</td>
                </tr>
                <tr class=""align-top"">
                    <th scope=""row"">4</th>
                    <td colspan=""2"" class=""align-top"">Larry the Bird</td>
                    <td>twitter</td>
                </tr>
                <tr class=""align-center"">
                    <th scope=""row"">5</th>
                    <td colspan=""2"">Larry the Bird</td>
                    <td>twitter</td>
                </tr>
                <tr>
                    <th scope=""row"">");
            WriteLiteral(@"3</th>
                    <td colspan=""2"">Larry the Bird</td>
                    <td>twitter</td>
                </tr>
            </tbody>
        </table>
    </div>
    <br />

    <table>
        <thead>
            <tr>
                <th scope=""col"">#</th>
                <th scope=""col"">First</th>
                <th scope=""col"">Last</th>
                <th scope=""col"">Handle</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th scope=""row"">1</th>
                <td>Mark</td>
                <td>Otto</td>
                <td>mdo</td>
            </tr>
            <tr>
                <th scope=""row"">2</th>
                <td>Jacob</td>
                <td>Thornton</td>
                <td>fat</td>
            </tr>
            <tr>
                <th scope=""row"">3</th>
                <td colspan=""2"">Larry the Bird</td>
                <td>twitter</td>
            </tr>
        </tbody>
    </table>

    <br />

   ");
            WriteLiteral(@" <div class=""container"">

        <div class=""row"">
            <div class=""col-6"">
                <img src=""https://pre.toros.edu.tr/dosya/763/resim/2021-06-08-Banner-odul.jpg"" class=""img-fluid"" />
            </div>
            <div class=""col-3"">
                <img src=""https://cdn3.iconfinder.com/data/icons/3d-applications/64/app_icons_social_media_search___google_logo_engine_software.png"" class=""img-fluid"" />
            </div>
            <div class=""col-3"">
                <img src=""https://pre.toros.edu.tr/dosya/763/resim/2021-06-08-Banner-odul.jpg"" class=""img-thumbnail"" />
            </div>
        </div>
        <div class=""row"">
            <div class=""col-6"">
                ​<picture>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("source", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "eb44043c0b1718c6cf751e30062cd1ecc329689947612", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_10);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <img src=""https://pre.toros.edu.tr/dosya/763/resim/2021-06-08-Banner-odul.jpg"" class=""img-fluid img-thumbnail"" alt=""..."">
                </picture>

            </div>
        </div>
    </div>


    <div class=""container"">




        <dl class=""row"">
            <dt class=""col-sm-3"">Description lists</dt>
            <dd class=""col-sm-9"">A description list is perfect for defining terms.</dd>

            <dt class=""col-sm-3"">Term</dt>
            <dd class=""col-sm-9"">
                <p>Definition for the term.</p>
                <p>And some more placeholder definition text.</p>
            </dd>

            <dt class=""col-sm-3"">Another term</dt>
            <dd class=""col-sm-9"">This definition is short, so no extra paragraphs or anything.</dd>

            <dt class=""col-sm-3 text-truncate"">Truncated term is truncated</dt>
            <dd class=""col-sm-9"">This can be useful when space is tight. Adds an ellipsis at the end.</dd>

            <dt class=""c");
            WriteLiteral(@"ol-sm-3"">Nesting</dt>
            <dd class=""col-sm-9"">
                <dl class=""row"">
                    <dt class=""col-sm-4"">Nested definition list</dt>
                    <dd class=""col-sm-8"">I heard you like definition lists. Let me put a definition list inside your definition list.</dd>
                </dl>
            </dd>
        </dl>
    </div>

    <dl class=""row"">
        <dt class=""col-sm-3"">Description lists</dt>
        <dd class=""col-sm-9"">A description list is perfect for defining terms.</dd>

        <dt class=""col-sm-3"">Term</dt>
        <dd class=""col-sm-9"">
            <p>Definition for the term.</p>
            <p>And some more placeholder definition text.</p>
        </dd>

        <dt class=""col-sm-3"">Another term</dt>
        <dd class=""col-sm-9"">This definition is short, so no extra paragraphs or anything.</dd>

        <dt class=""col-sm-3 text-truncate"">Truncated term is truncated</dt>
        <dd class=""col-sm-9"">This can be useful when space is tight. ");
            WriteLiteral(@"Adds an ellipsis at the end.</dd>

        <dt class=""col-sm-3"">Nesting</dt>
        <dd class=""col-sm-9"">
            <dl class=""row"">
                <dt class=""col-sm-4"">Nested definition list</dt>
                <dd class=""col-sm-8"">I heard you like definition lists. Let me put a definition list inside your definition list.</dd>
            </dl>
        </dd>
    </dl>

    <p>You can use the mark tag to <mark>highlight</mark> text.</p>
    <p><del>This line of text is meant to be treated as deleted text.</del></p>
    <p><s>This line of text is meant to be treated as no longer accurate.</s></p>
    <p><ins>This line of text is meant to be treated as an addition to the document.</ins></p>
    <p><u>This line of text will render as underlined.</u></p>
    <p><small>This line of text is meant to be treated as fine print.</small></p>
    <p><strong>This line rendered as bold text.</strong></p>
    <p><em>This line rendered as italicized text.</em></p>

    <p class=""lead"">
        This");
            WriteLiteral(@" is a lead paragraph. It stands out from regular paragraphs.
    </p>

    <h1 class=""display-1"">Display 1</h1>
    <h1 class=""display-2"">Display 2</h1>
    <h1 class=""display-3"">Display 3</h1>
    <h1 class=""display-4"">Display 4</h1>
    <h1 class=""display-5"">Display 5</h1>
    <h1 class=""display-6"">Display 6</h1>
    <h3>
        Fancy display heading
        <small class=""text-muted"">With faded secondary text</small>
    </h3>

    <h3 id=""summary"">Summary</h3>
    <div class=""d-none"" id=""test1"">test 1</div>
    <h3 id=""summary"">Summary</h3>
    <div class=""visually-hidden"" id=""test2"">test 1</div>
    <h3 id=""summary"">Summary</h3>
    <div class=""invisible"" id=""test3"">test 1</div>
    <p>The default <code>cursor</code> on summary is <code>text</code>, so we reset that to <code>pointer</code> to convey that the element can be interacted with by clicking on it.</p>
    <div class=""bd-example"">
        <details>
            <summary>Some details</summary>
            <p>More info about");
            WriteLiteral(@" the details.</p>
        </details>
        <details open>
            <summary>Even more details</summary>
            <p>Here are even more details about the details.</p>
        </details>
    </div>
    <br />   <br />
    <h3 id=""address"">Address</h3>
    <p>The <code>&lt;address&gt;</code> element is updated to reset the browser default <code>font-style</code> from <code>italic</code> to <code>normal</code>. <code>line-height</code> is also now inherited, and <code>margin-bottom: 1rem</code> has been added. <code>&lt;address&gt;</code>s are for presenting contact information for the nearest ancestor (or an entire body of work). Preserve formatting by ending lines with <code>&lt;br&gt;</code>.</p>
    <div class=""bd-example"">
        <address>
            <strong>Twitter, Inc.</strong><br>
            1355 Market St, Suite 900<br>
            San Francisco, CA 94103<br>
            <abbr title=""Phone"">P:</abbr> (123) 456-7890
        </address>
        <address>
            <strong>Ful");
            WriteLiteral(@"l Name</strong><br>
            <a href=""mailto:first.last@example.com"">first.last@example.com</a>
        </address>
    </div>
    <br />   <br />
    <span tabindex=""0"">Non-button element button</span>
    <br />   <br />
    <span role=""button"" tabindex=""0"">Non-button element button</span>
    <br />   <br />

    <div class=""container"">
        <h2 id=""tables"">Tables</h2>
        <p>Tables are slightly adjusted to style <code>&lt;caption&gt;</code>s, collapse borders, and ensure consistent <code>text-align</code> throughout. Additional changes for borders, padding, and more come with <a href=""/docs/5.0/content/tables/"">the <code>.table</code> class</a>.</p>
        <div class=""bd-example"">
            <table>
                <caption>
                    This is an example table, and this is its caption to describe the contents.
                </caption>
                <thead>
                    <tr>
                        <th>Table heading</th>
                        <th>Table ");
            WriteLiteral(@"heading</th>
                        <th>Table heading</th>
                        <th>Table heading</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Table cell</td>
                        <td>Table cell</td>
                        <td>Table cell</td>
                        <td>Table cell</td>
                    </tr>
                    <tr>
                        <td>Table cell</td>
                        <td>Table cell</td>
                        <td>Table cell</td>
                        <td>Table cell</td>
                    </tr>
                    <tr>
                        <td>Table cell</td>
                        <td>Table cell</td>
                        <td>Table cell</td>
                        <td>Table cell</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <br />   <br />
        <samp>This text is meant to be treated a");
            WriteLiteral(@"s sample output from a computer program.</samp>
        <br />
        To switch directories, type <kbd>cd</kbd> followed by the name of the directory.<br>
        To edit settings, press <kbd><kbd>ctrl</kbd> + <kbd>,</kbd></kbd>  <br />
        <var>y</var> = <var>m</var><var>x</var> + <var>b</var>
        <br />
        <code>
            &lt;p&gt;Sample text here...&lt;/p&gt;
            &lt;p&gt;And another line of sample text here...&lt;/p&gt;
        </code>

        <pre><code>&lt;p&gt;Sample text here...&lt;/p&gt;
&lt;p&gt;And another line of sample text here...&lt;/p&gt;
</code></pre>

        <ul>
            <li>All lists have their top margin removed</li>
            <li>And their bottom margin normalized</li>
            <li>
                Nested lists have no bottom margin
                <ul>
                    <li>This way they have a more even appearance</li>
                    <li>Particularly when followed by more list items</li>
                </ul>
           ");
            WriteLiteral(@" </li>
            <li>The left padding has also been reset</li>
        </ul>
        <ol>
            <li>Here&rsquo;s an ordered list</li>
            <li>With a few list items</li>
            <li>It has the same overall look</li>
            <li>As the previous unordered list</li>
        </ol>
    </div>

    <div class=""bd-example"">
        <dl>
            <dt>Description lists</dt>
            <dd>A description list is perfect for defining terms.</dd>
            <dt>Term</dt>
            <dd>Definition for the term.</dd>
            <dd>A second definition for the same term.</dd>
            <dt>Another term</dt>
            <dd>Definition for this other term.</dd>
        </dl>
    </div>
    For example, <code>&lt;section&gt;</code> should be wrapped as inline.  <br />
    <br />
    <figure>
        <blockquote class=""blockquote"">
            <p>A well-known quote, contained in a blockquote element.</p>
        </blockquote>
        <figcaption class=""blockquote-footer");
            WriteLiteral(@""">
            Someone famous in <cite title=""Source Title"">Source Title</cite>
        </figcaption>
    </figure>
    <br />
    <br />
    <blockquote class=""blockquote"">
        <p>A well-known quote, contained in a blockquote element.</p>
    </blockquote>
    <br />
    <br />
    <h1>h1. Bootstrap heading</h1>
    <h2>h2. Bootstrap heading</h2>
    <h3>h3. Bootstrap heading</h3>
    <h4>h4. Bootstrap heading</h4>
    <h5>h5. Bootstrap heading</h5>
    <h6>h6. Bootstrap heading</h6>
    <br />
    <br />
    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb44043c0b1718c6cf751e30062cd1ecc329689958987", async() => {
                WriteLiteral(@"
        <fieldset>
            <legend>Example legend</legend>
            <p>
                <label for=""input"">Example input</label>
                <input type=""text"" id=""input"" placeholder=""Example input"">
            </p>
            <p>
                <label for=""email"">Example email</label>
                <input type=""email"" id=""email"" placeholder=""test@example.com"">
            </p>
            <p>
                <label for=""tel"">Example telephone</label>
                <input type=""tel"" id=""tel"">
            </p>
            <p>
                <label for=""url"">Example url</label>
                <input type=""url"" id=""url"">
            </p>
            <p>
                <label for=""number"">Example number</label>
                <input type=""number"" id=""number"">
            </p>
            <p>
                <label for=""search"">Example search</label>
                <input type=""search"" id=""search"">
            </p>
            <p>
                <label for=""rang");
                WriteLiteral(@"e"">Example range</label>
                <input type=""range"" id=""range"" min=""0"" max=""10"">
            </p>
            <p>
                <label for=""file"">Example file input</label>
                <input type=""file"" id=""file"">
            </p>
            <p>
                <label for=""select"">Example select</label>
                <select id=""select"">
                    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb44043c0b1718c6cf751e30062cd1ecc329689960752", async() => {
                    WriteLiteral("Choose...");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                    <optgroup label=\"Option group 1\">\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb44043c0b1718c6cf751e30062cd1ecc329689962062", async() => {
                    WriteLiteral("Option 1");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb44043c0b1718c6cf751e30062cd1ecc329689963312", async() => {
                    WriteLiteral("Option 2");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb44043c0b1718c6cf751e30062cd1ecc329689964562", async() => {
                    WriteLiteral("Option 3");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                    </optgroup>\r\n                    <optgroup label=\"Option group 2\">\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb44043c0b1718c6cf751e30062cd1ecc329689965906", async() => {
                    WriteLiteral("Option 4");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb44043c0b1718c6cf751e30062cd1ecc329689967156", async() => {
                    WriteLiteral("Option 5");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eb44043c0b1718c6cf751e30062cd1ecc329689968406", async() => {
                    WriteLiteral("Option 6");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                    </optgroup>\r\n                </select>\r\n            </p>\r\n            <p>\r\n                <label>\r\n                    <input type=\"checkbox\"");
                BeginWriteAttribute("value", " value=\"", 34951, "\"", 34959, 0);
                EndWriteAttribute();
                WriteLiteral(@">
                    Check this checkbox
                </label>
            </p>
            <p>
                <label>
                    <input type=""radio"" name=""optionsRadios"" id=""optionsRadios1"" value=""option1"" checked>
                    Option one is this and that
                </label>
                <label>
                    <input type=""radio"" name=""optionsRadios"" id=""optionsRadios2"" value=""option2"">
                    Option two is something else that's also super long to demonstrate the wrapping of these fancy form controls.
                </label>
                <label>
                    <input type=""radio"" name=""optionsRadios"" id=""optionsRadios3"" value=""option3"" disabled>
                    Option three is disabled
                </label>
            </p>
            <p>
                <label for=""textarea"">Example textarea</label>
                <textarea id=""textarea"" rows=""3""></textarea>
            </p>
            <p>
                <label for=""da");
                WriteLiteral(@"te"">Example date</label>
                <input type=""date"" id=""date"">
            </p>
            <p>
                <label for=""time"">Example time</label>
                <input type=""time"" id=""time"">
            </p>
            <p>
                <label for=""password"">Example password</label>
                <input type=""password"" id=""password"">
            </p>
            <p>
                <label for=""datetime-local"">Example datetime-local</label>
                <input type=""datetime-local"" id=""datetime-local"">
            </p>
            <p>
                <label for=""week"">Example week</label>
                <input type=""week"" id=""week"">
            </p>
            <p>
                <label for=""month"">Example month</label>
                <input type=""month"" id=""month"">
            </p>
            <p>
                <label for=""color"">Example color</label>
                <input type=""color"" id=""color"">
            </p>
            <p>
                <label f");
                WriteLiteral(@"or=""output"">Example output</label>
                <output name=""result"" id=""output"">100</output>
            </p>
            <p>
                <button type=""submit"">Button submit</button>
                <input type=""submit"" value=""Input submit button"">
                <input type=""reset"" value=""Input reset button"">
                <input type=""button"" value=""Input button"">
            </p>
            <p>
                <button type=""submit"" disabled>Button submit</button>
                <input type=""submit"" value=""Input submit button"" disabled>
                <input type=""reset"" value=""Input reset button"" disabled>
                <input type=""button"" value=""Input button"" disabled>
            </p>
        </fieldset>
    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
    <br />
    <br />
    <div class=""row g-0"">
        <div class=""col-sm-6 col-md-8"">.col-sm-6 .col-md-8</div>
        <div class=""col-6 col-md-4"">.col-6 .col-md-4</div>
    </div>
    <br />
    <br />
    <div class=""container"">
        <div class=""row row-cols-2 row-cols-lg-5 g-2 g-lg-3"">
            <div class=""col"">
                <div class=""p-3 border bg-light"">Row column</div>
            </div>
            <div class=""col"">
                <div class=""p-3 border bg-light"">Row column</div>
            </div>
            <div class=""col"">
                <div class=""p-3 border bg-light"">Row column</div>
            </div>
            <div class=""col"">
                <div class=""p-3 border bg-light"">Row column</div>
            </div>
            <div class=""col"">
                <div class=""p-3 border bg-light"">Row column</div>
            </div>
            <div class=""col"">
                <div class=""p-3 border bg-light"">Row column</div>
            </div>
         ");
            WriteLiteral(@"   <div class=""col"">
                <div class=""p-3 border bg-light"">Row column</div>
            </div>
            <div class=""col"">
                <div class=""p-3 border bg-light"">Row column</div>
            </div>
            <div class=""col"">
                <div class=""p-3 border bg-light"">Row column</div>
            </div>
            <div class=""col"">
                <div class=""p-3 border bg-light"">Row column</div>
            </div>
        </div>
    </div>    <br />
    <br />
    <div class=""container overflow-hidden mb-3"">
        <div class=""row g-5"">
            <div class=""col-6"">
                <div class=""p-3 border bg-light"">Custom column padding</div>
            </div>
            <div class=""col-6"">
                <div class=""p-3 border bg-light"">Custom column padding</div>
            </div>
            <div class=""col-6"">
                <div class=""p-3 border bg-light"">Custom column padding</div>
            </div>
            <div class=""col-6"">
    ");
            WriteLiteral(@"            <div class=""p-3 border bg-light"">Custom column padding</div>
            </div>
        </div>
    </div>

    <div class=""container overflow-hidden mb-3"">
        <div class=""row gy-5"">
            <div class=""col-6"">
                <div class=""p-3 border bg-light"">Custom column padding</div>
            </div>
            <div class=""col-6"">
                <div class=""p-3 border bg-light"">Custom column padding</div>
            </div>
            <div class=""col-6"">
                <div class=""p-3 border bg-light"">Custom column padding</div>
            </div>
            <div class=""col-6"">
                <div class=""p-3 border bg-light"">Custom column padding</div>
            </div>
        </div>
    </div>

    <div class=""container overflow-hidden"">
        <div class=""row gx-5"">
            <div class=""col"">
                <div class=""p-3 border bg-light"">Custom column padding Custom column padding Custom column padding Custom column padding Custom column paddi");
            WriteLiteral(@"ng</div>
            </div>
            <div class=""col"">
                <div class=""p-3 border bg-light"">Custom column padding</div>
            </div>
        </div>
    </div>
    <br />
    <br />


    <div class=""container px-4"">
        <div class=""row gx-5"">
            <div class=""col-auto"">
                <div class=""p-2 border bg-light"">Custom column padding</div>
            </div>
            <div class=""col-auto"">
                <div class=""p-2 border bg-light"">Custom column padding</div>
            </div>
        </div>
    </div>
    <br />
    <br />

    <div class=""container"">
        <div class=""row"">

            <div class=""col-9"">
                <p>
                    A paragraph of placeholder text. We're using it here to show the use of the clearfix class. We're adding quite a few meaningless phrases here to demonstrate how the columns interact here with the floated image.
                </p>

                <p>
                    As you can s");
            WriteLiteral(@"ee the paragraphs gracefully wrap around the floated image. Now imagine how this would look with some actual content in here, rather than just this boring placeholder text that goes on and on, but actually conveys no tangible information at. It simply takes up space and should not really be read.
                </p>

                <p>
                    And yet, here you are, still persevering in reading this placeholder text, hoping for some more insights, or some hidden easter egg of content. A joke, perhaps. Unfortunately, there's none of that here.
                </p>
            </div>
            <div class=""col-3 d-flex align-items-center justify-content-end"">
                <img src=""https://lms.toros.edu.tr/static/loginlogo/71C0916FE7C72F289292F01D8841FE7F.png"" alt=""..."">
            </div>
        </div>
    </div>
    <br />
    <br />

    <div class=""container"">
        <img src=""https://lms.toros.edu.tr/static/loginlogo/71C0916FE7C72F289292F01D8841FE7F.png"" class=""col-md-6 ");
            WriteLiteral(@"float-md-end mb-3 ms-md-3"" alt=""..."">

        <p>
            A paragraph of placeholder text. We're using it here to show the use of the clearfix class. We're adding quite a few meaningless phrases here to demonstrate how the columns interact here with the floated image.
        </p>

        <p>
            As you can see the paragraphs gracefully wrap around the floated image. Now imagine how this would look with some actual content in here, rather than just this boring placeholder text that goes on and on, but actually conveys no tangible information at. It simply takes up space and should not really be read.
        </p>

        <p>
            And yet, here you are, still persevering in reading this placeholder text, hoping for some more insights, or some hidden easter egg of content. A joke, perhaps. Unfortunately, there's none of that here.
        </p>
    </div>
    <br />
    <br />
    <div class=""col-3 bg-light p-3 border"">
        .col-3: width of 25%
    </div>
    <div cla");
            WriteLiteral(@"ss=""col-sm-9 bg-light p-3 border"">
        .col-sm-9: width of 75% above sm breakpoint
    </div>

    <div class=""container"">
        <div class=""row"">
            <div class=""col-md-4"">.col-md-4</div>
            <div class=""col-md-4 ms-auto"">.col-md-4 .ms-auto</div>
        </div>
        <div class=""row"">
            <div class=""col-md-3 ms-md-auto"">.col-md-3 .ms-md-auto</div>
            <div class=""col-md-3 ms-md-auto"">.col-md-3 .ms-md-auto</div>
        </div>
        <div class=""row"">
            <div class=""col-auto me-auto"">.col-auto .me-auto</div>
            <div class=""col-auto"">.col-auto</div>
        </div>
    </div>
    <br />
    <br />
    <div class=""container"">
        <div class=""row"">
            <div class=""col-md-4"">.col-md-4</div>
            <div class=""col-md-4 offset-md-3"">.col-md-4 .offset-md-3</div>
        </div>
        <div class=""row"">
            <div class=""col-md-3 offset-md-3"">.col-md-3 .offset-md-3</div>
            <div class=""col-md-3 offset");
            WriteLiteral(@"-md-3"">.col-md-3 .offset-md-3</div>
        </div>
        <div class=""row"">
            <div class=""col-md-6 offset-md-3"">.col-md-6 .offset-md-3</div>
        </div>
    </div>
    <br />
    <br />
    <div class=""container"">
        <div class=""row"">
            <div class=""col order-last"">
                First in DOM, ordered last
            </div>
            <div class=""col"">
                Second in DOM, unordered
            </div>
            <div class=""col order-first"">
                Third in DOM, ordered first
            </div>
        </div>
    </div>
    <br />
    <br />
    <div class=""container"">
        <div class=""row"">
            <div class=""col order-2"">
                First in DOM, no order applied
            </div>
            <div class=""col order-5"">
                Second in DOM, with a larger order
            </div>
            <div class=""col order-1"">
                Third in DOM, with an order of 1
            </div>
        </div>
  ");
            WriteLiteral(@"  </div>
    <br />
    <br />
    <div class=""container"">
        <div class=""row"">
            <div class=""col-6 col-sm-3"">.col-6 .col-sm-3</div>
            <div class=""col-6 col-sm-3"">.col-6 .col-sm-3</div>

            <!-- Force next columns to break to new line -->
            <div class=""w-100 d-none d-md-block""></div>

            <div class=""col-6 col-sm-3"">.col-6 .col-sm-3</div>
            <div class=""col-6 col-sm-3"">.col-6 .col-sm-3</div>
        </div>
    </div>
    <br />
    <br />
    <div class=""container"">
        <div class=""row"">
            <div class=""col-9"">.col-9</div>
            <div class=""col-4"">.col-4<br>Since 9 + 4 = 13 &gt; 12, this 4-column-wide div gets wrapped onto a new line as one contiguous unit.</div>
            <div class=""col-6"">.col-6<br>Subsequent columns continue along the new line.</div>
        </div>
    </div>
    <br />
    <br />
    <div class=""container rowsize"">
        <div class=""row justify-content-start"">
            <div c");
            WriteLiteral(@"lass=""col-4"">
                justify-content-start
            </div>
            <div class=""col-4"">
                justify-content-start
            </div>
        </div>
        <div class=""row justify-content-center"">
            <div class=""col-4"">
                justify-content-center
            </div>
            <div class=""col-4"">
                justify-content-center
            </div>
        </div>
        <div class=""row justify-content-end"">
            <div class=""col-4"">
                justify-content-end
            </div>
            <div class=""col-4"">
                justify-content-end
            </div>
        </div>
        <div class=""row justify-content-around"">
            <div class=""col-4"">
                justify-content-around
            </div>
            <div class=""col-4"">
                justify-content-around
            </div>
        </div>
        <div class=""row justify-content-between"">
            <div class=""col-4"">
           ");
            WriteLiteral(@"     justify-content-between
            </div>
            <div class=""col-4"">
                justify-content-between
            </div>
        </div>
        <div class=""row justify-content-evenly"">
            <div class=""col-4"">
                justify-content-evenly
            </div>
            <div class=""col-4"">
                justify-content-evenly
            </div>
        </div>
    </div>
    <br />
    <br />
    <div class=""container"">
        <div class=""row"" style=""height:100px;"">
            <div class=""col align-self-start"">
                One of three columns
            </div>
            <div class=""col align-self-center"">
                One of three columns
            </div>
            <div class=""col align-self-end"">
                One of three columns
            </div>
        </div>
    </div>
    <br />
    <br />
    <div class=""container"">
        <div class=""row align-items-start"" style=""height:100px;"">
            <div class=""col"">
  ");
            WriteLiteral(@"              start   One of three columns
            </div>
            <div class=""col"">
                One of three columns
            </div>
            <div class=""col"">
                One of three columns
            </div>
        </div>
        <div class=""row align-items-center"" style=""height:100px;"">
            <div class=""col"">
                center     One of three columns
            </div>
            <div class=""col"">
                One of three columns
            </div>
            <div class=""col"">
                One of three columns
            </div>
        </div>
        <div class=""row align-items-end"" style=""height:100px;"">
            <div class=""col"">
                end   One of three columns
            </div>
            <div class=""col"">
                One of three columns
            </div>
            <div class=""col"">
                One of three columns
            </div>
        </div>
    </div>
    <br />
    <br />
    <div class");
            WriteLiteral(@"=""container"">
        <div class=""row"">
            <div class=""col-sm-3"">
                Level 1: .col-sm-3
            </div>
            <div class=""col-sm-9"">
                <div class=""row"">
                    <div class=""col-8 col-sm-6"">
                        Level 2: .col-8 .col-sm-6
                    </div>
                    <div class=""col-4 col-sm-6"">
                        Level 2: .col-4 .col-sm-6
                    </div>
                </div>
            </div>
        </div>
    </div>
    <br />
    <br />
    <div class=""container"">
        <div class=""row row-cols-1 row-cols-sm-2 row-cols-md-4"">
");
            WriteLiteral(@"            <div class=""col"">Column</div>
            <div class=""col"">Column</div>
            <div class=""col"">Column</div>
            <div class=""col"">Column</div>
        </div>
    </div>
    <br />
    <br />

    <div class=""container"">
        <div class=""row row-cols-4"">
            <div class=""col"">Column</div> ");
            WriteLiteral("\r\n            <div class=\"col\">Column</div> ");
            WriteLiteral("\r\n            <div class=\"col-6\">Column</div> ");
            WriteLiteral("\r\n            <div class=\"col\">Column</div> ");
            WriteLiteral("\r\n");
            WriteLiteral(@"        </div>
    </div>

    <br />
    <br />
    <div class=""container"">
        <div class=""row row-cols-auto"">
            <div class=""col"">Column</div>
            <div class=""col"">Column Column Column</div>
            <div class=""col"">Column</div>
            <div class=""col"">Column</div>
            <div class=""col"">Column</div>
            <div class=""col"">Column</div>
        </div>
    </div>

    <br />
    <br />

    <div class=""container"">
        <div class=""row row-cols-3"">
            <div class=""col"">Column</div>
            <div class=""col"">Column</div>
            <div class=""col"">Column</div>
            <div class=""col"">Column</div>
            <div class=""col"">Column</div>
            <div class=""col"">Column</div>
        </div>
    </div>

    <br />
    <br />

    <div class=""container"">
        <!-- Stack the columns on mobile by making one full-width and the other half-width -->
        <div class=""row"">
            <div class=""col-md-8"">.col-");
            WriteLiteral(@"md-8</div>
            <div class=""col-6 col-md-4"">.col-6 .col-md-4</div>
        </div>

        <!-- Columns start at 50% wide on mobile and bump up to 33.3% wide on desktop -->
        <div class=""row"">
            <div class=""col-6 col-md-4"">.col-6 .col-md-4</div>
            <div class=""col-6 col-md-4"">.col-6 .col-md-4</div>
            <div class=""col-6 col-md-4"">.col-6 .col-md-4</div>
        </div>

        <!-- Columns are always 50% wide, on mobile and desktop -->
        <div class=""row"">
            <div class=""col-6"">.col-6</div>
            <div class=""col-6"">.col-6</div>
        </div>
    </div>

    <br />
    <br />

    <div class=""container"">
        <div class=""row"">
            <div class=""col-sm-8"">col-sm-8</div>
            <div class=""col-sm-4"">col-sm-4</div>
        </div>
        <div class=""row"">
            <div class=""col-sm"">col-sm</div>
            <div class=""col-sm"">col-sm</div>
            <div class=""col-sm"">col-sm</div>
        </div>
       ");
            WriteLiteral(@" <div class=""row"">
            <div class=""col"">col</div>
            <div class=""col"">col</div>
            <div class=""col"">col</div>
        </div>
        <div class=""row"">
            <div class=""col-xl"">col-xl</div>
            <div class=""col-xl"">col-xl</div>
            <div class=""col-xl"">col-xl</div>
        </div>
    </div>

    <br />

    <div class=""container"">
        <div class=""row"">
            <div class=""col"">col</div>
            <div class=""col""> Variablesdfsdfsdfdsfdsfds width content</div>
");
            WriteLiteral(@"            <div class=""col"">VariablesdfsdfsdfdsfdsfdsVariablesdfsdfsdfdsfdsfds</div>
            <div class=""col"">col</div>
        </div>
        <div class=""row"">
            <div class=""col-8"">col-8</div>
            <div class=""col-4"">col-4</div>
        </div>
    </div>
    <br /><br />
    <div class=""container"">
        <div class=""row justify-content-md-center"">
            <div class=""col col-lg-2"">
                1 of 3 -content-md-center
            </div>
            <div class=""col-md-auto"">
                Variable width content   Variable width content
            </div>
            <div class=""col col-lg-2"">
                3 of 3
            </div>
        </div>
        <div class=""row"">
            <div class=""col"">
                1 of 3
            </div>
            <div class=""col-md-auto"">
                Variable width content
            </div>
            <div class=""col col-lg-2"">
                3 of 3
            </div>
        </div>
        <d");
            WriteLiteral(@"iv class=""row justify-content-md-center"">
            <div class=""col-xs"">
                1 of 3
            </div>
            <div class=""col-auto"">
                Variable width content   Variable width content  Variable width content  Variable width content
            </div>
            <div class=""col-xs"">
                3 of 3
            </div>
        </div>
    </div>

    <br />




    <div class=""container"">
        <div class=""row"">
            <div class=""col"">
");
            WriteLiteral("                1 of 3\r\n            </div>\r\n            <div class=\"col-8\">\r\n");
            WriteLiteral("                2 of 3 (wider)\r\n            </div>\r\n            <div class=\"col\">\r\n");
            WriteLiteral("                3 of 3\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n                <div class=\"col\">\r\n");
            WriteLiteral("                    1 of 3\r\n                </div>\r\n                <div class=\"col-5\">\r\n");
            WriteLiteral("                    2 of 3 (wider)\r\n                </div>\r\n                <div class=\"col\">\r\n");
            WriteLiteral(@"                    3 of 3
                </div>
            </div>
        </div>
    </div>
    <br />
    <br />

    <table>
        <tr>
            <td>
                Column
            </td>
            <td>
                Column
            </td>
            <td>
                Column
            </td>
        </tr>
    </table>

    Column
    <br />
    <br />
    <div class=""container-lg"">
        <div class=""row"">
            <div class=""col border border-2"">
                Column
            </div>
            <div class=""col border border-2"">
                Column
            </div>
        </div>
        <div class=""container-sm"">
            <div class=""row"">
                <div class=""col border border-2"">
                    Column
                </div>
                <div class=""col border border-2"">
                    Column
                </div>
                <div class=""col border border-2"">
                    Column
            ");
            WriteLiteral(@"    </div>
            </div>
        </div>
    </div>
    <br />
    <br />
    <br />
    <br />
    <div class=""container-fluid border border-primary border-2"">
        Use .container-fluid for a full width container, spanning the entire width of the viewport.
    </div>
    <div class=""container-sm border border-primary border-2"">100% wide until small breakpoint</div>
    <div class=""container-md border border-primary border-2"">100% wide until medium breakpoint</div>
    <div class=""container-lg border border-primary border-2"">100% wide until large breakpoint</div>
    <div class=""container-xl border border-primary border-2"">100% wide until extra large breakpoint</div>
    <div class=""container-xxl border border-primary border-2"">100% wide until extra extra large breakpoint</div>
</div>

<script>
    // Example starter JavaScript for disabling form submissions if there are invalid fields
(function () {
  'use strict'

  // Fetch all the forms we want to apply custom Bootstrap valid");
            WriteLiteral(@"ation styles to
  var forms = document.querySelectorAll('.needs-validation')

  // Loop over them and prevent submission
  Array.prototype.slice.call(forms)
    .forEach(function (form) {
      form.addEventListener('submit', function (event) {
        if (!form.checkValidity()) {
          event.preventDefault()
          event.stopPropagation()
        }

        form.classList.add('was-validated')
      }, false)
    })
})()
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public IOptions<lecture_9.MyOptions> OptionsAccessor { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public IConfiguration Configuration { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
